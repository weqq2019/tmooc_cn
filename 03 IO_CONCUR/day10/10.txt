前情回顾：

1. 同步互斥

   * 什么是同步互斥
   * 同步互斥方法：
       1. Event()    e.set()   e.clear()  e.wait()
       2. Lock()     lock.acquire()   lock.release()

2. GIL(全局解释器锁)

   问题 ：  解释器在同一时刻只能解释一个线程

   后果 ：  线程执行效率低下

   结论 ： 多线程程序只适合那些有大量阻塞延迟的任务

3. 进程线程差异

   *  有什么区别
   *  使用方向

4. 网络并发模型

   多进程和多线程的并发模型


FTP文件服务

1. 技术点分析

   * 并发模型  ：　多线程并发
   * 网络传输　 :  tcp网络

   客户端请求流程：　1.客户端发起请求
                  2.服务端判断能否满足客户端请求，给出回复
                  3.根据回复，确定下一步操作

2. 功能模块划分 （结构设计）

    * 框架搭建
    * 查看文件
    * 下载文件
    * 上传文件


   封装： 核心功能封装为类

3. 通信协议设定

             请求类型         参量

   查看文件    L

   上传文件    P              filename

   下载文件    G              filename

   退出       E

4. 分模块设计功能逻辑流程

    * 框架搭建
    * 查看文件
           客户端：  发送请求
                    等待接收反馈结果
                    Ｙ　接收文件列表
                    Ｎ　结束

           服务端：　接收请求
           　　　　　判断能否满足请求，将结果回复 (看文件库是否为空)
           　　　　　Ｙ　发送文件列表
                   Ｎ　　结束

    * 下载文件
          客户端 ： 发送请求 （请求包含文件名字）
                   等待接收反馈结果
                    Ｙ　接收文件
                    Ｎ　结束

          服务端 ： 接收请求，提取出文件名
                   判断能否满足请求，将结果回复 (看文件库中是否有这个文件)
           　　　　　Ｙ　发送文件
                   Ｎ　　结束

    * 上传文件
    * 退出



作业： 1. 理解IO多路复用模型
      2. 进制转换
      3. ftp程序





